# -*- coding: utf-8 -*-
"""final-project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1H4ZVvQubBMJ9Qc53uxSU1HYwe4vAZ00Y
"""

import random
import string
from concurrent.futures import ThreadPoolExecutor
from time import sleep
import time
import matplotlib.pyplot as plt

from cryptography.fernet import Fernet
import os

#-------------------Generate a random key----------------------
def generate_random_key(length):
  startTime = time.time()
  letters = string.ascii_lowercase + string.digits
  add_time(time.time() - startTime)
  return ''.join(random.choice(letters) for i in range(length))

#--------------------Encrypt a message--------------------------
def encrypt(message):
  startTime = time.time()
  secret_message = ""
  for letter in message:
    secret_message = secret_message + chr(ord(letter) + 1)
  add_time(time.time() - startTime)
  return secret_message

#--------------------Desencrypt a message--------------------------
def desencrypt():
  startTime = time.time()
  message = "Message to be encrypted"
  secret_message = ""
  for letter in message:
    secret_message = secret_message + chr(ord(letter) + 1)
  desen_msg = ""
  for letter in secret_message:
    desen_msg = desen_msg + chr(ord(letter) - 1)
  add_time(time.time() - startTime)
  return desen_msg

#--------------------Encrypt TXT--------------------------
def encrypt_file(fileName, saveName):
  startTime = time.time()
  # Generar una clave aleatoria
  clave = Fernet.generate_key()
  # Guardar la clave en un archivo
  with open('clave.key', 'wb') as archivo_clave:
      archivo_clave.write(clave)
  # Crear un objeto Fernet con la clave generada
  fernet = Fernet(clave)
  # Nombre del archivo a encriptar
  archivo_original = fileName
  # Leer el archivo original
  with open(archivo_original, 'rb') as archivo:
      datos = archivo.read()
  # Encriptar los datos
  datos_encriptados = fernet.encrypt(datos)
  # Guardar los datos en un archivo encriptado
  archivo_encriptado = saveName
  with open(archivo_encriptado, 'wb') as archivo:
      archivo.write(datos_encriptados)
  add_time(time.time() - startTime)
  return clave

def desencrypt_file(key, encryptedName, saveName):
  startTime = time.time()
  # Leer la clave desde el archivo
  with open('clave.key', 'rb') as archivo_clave:
      clave = archivo_clave.read()
  # Crear un objeto Fernet con la clave
  fernet = Fernet(clave)
  # Nombre del archivo encriptado
  archivo_encriptado = encryptedName #'pdf-encrypted.txt'
  # Leer el archivo encriptado
  with open(archivo_encriptado, 'rb') as archivo:
      datos_encriptados = archivo.read()
  # Desencriptar los datos
  datos_desencriptados = fernet.decrypt(datos_encriptados)
  # Nombre del archivo desencriptado
  archivo_desencriptado = saveName #'pdf-desencrypted.txt'
  # Guardar los datos desencriptados en un archivo
  with open(archivo_desencriptado, 'wb') as archivo:
      archivo.write(datos_desencriptados)
  add_time(time.time() - startTime)

times = []
def add_time(t):
  times.append(t)

def plot_time(r):
  plt.bar(['T1','T2','T3','T4','T5','T6','T7','T8','T9','T10','T11','T12','T13','T14','T15','T16','T17','T18','T19','T20','T21'],r)
  plt.show()

def main():
    executor = ThreadPoolExecutor(5)
    future_1 = executor.submit(generate_random_key, 16)
    future_2 = executor.submit(encrypt, ("Message to be encrypted"))
    future_3 = executor.submit(desencrypt)

    future_4 = executor.submit(encrypt_file('txt-file.txt','txt-encrypted.txt'))
    clave_txt = future_4.result
    future_5 = executor.submit(desencrypt_file( clave_txt ,'txt-encrypted.txt', 'txt-desencrypted.txt'))

    future_6 = executor.submit(encrypt_file('pdf-file.pdf','pdf-encrypted.txt'))
    clave_pdf = future_6.result
    future_7 = executor.submit(desencrypt_file( clave_pdf ,'pdf-encrypted.txt', 'pdf-desencrypted.pdf'))

    future_8 = executor.submit(encrypt_file('csv-file.csv','csv-encrypted.txt'))
    clave_csv = future_8.result
    future_9 = executor.submit(desencrypt_file( clave_csv ,'csv-encrypted.txt', 'csv-desencrypted.csv'))

    future_10 = executor.submit(encrypt_file('docx-file.docx','docx-encrypted.txt'))
    clave_docx = future_10.result
    future_11 = executor.submit(desencrypt_file( clave_docx ,'docx-encrypted.txt', 'docx-desencrypted.docx'))

    future_12 = executor.submit(encrypt_file('xlsx-file.xlsx','xlsx-encrypted.txt'))
    clave_xlsx = future_12.result
    future_13 = executor.submit(desencrypt_file( clave_xlsx ,'xlsx-encrypted.txt', 'xlsx-desencrypted.xlsx'))

    future_14 = executor.submit(encrypt_file('pptx-file.pptx','pptx-encrypted.txt'))
    clave_pptx = future_14.result
    future_15 = executor.submit(desencrypt_file( clave_xlsx ,'pptx-encrypted.txt', 'pptx-desencrypted.pptx'))

    future_16 = executor.submit(encrypt_file('png-file.png','png-encrypted.txt'))
    clave_png = future_16.result
    future_17 = executor.submit(desencrypt_file( clave_xlsx ,'png-encrypted.txt', 'png-desencrypted.png'))

    future_18 = executor.submit(encrypt_file('jpg-file.jpg','jpg-encrypted.txt'))
    clave_jpg = future_18.result
    future_19 = executor.submit(desencrypt_file( clave_xlsx ,'jpg-encrypted.txt', 'jpg-desencrypted.jpg'))

    future_20 = executor.submit(encrypt_file('gif-file.gif','gif-encrypted.txt'))
    clave_ico = future_20.result
    future_21 = executor.submit(desencrypt_file( clave_xlsx ,'gif-encrypted.txt', 'gif-desencrypted.gif'))

    print('Thread 1 generated the key: ' + future_1.result() + "\n-----------------------\n")
    print("Thread 2 encrypted the message 'Message to be encrypted' the result is: " + future_2.result() + "\n-----------------------\n")
    print("Thread 3 desencrypted the message: " + future_3.result() + "\n-----------------------\n")

    print('Thread 4 : txt file encrypted Finished' , future_4.result , "\n-----------------------\n")
    print('Thread 5 : txt file desencrypted Finished' , future_5.result , "\n-----------------------\n")

    print('Thread 6 : pdf file encrypted Finished' , future_6.result , "\n-----------------------\n")
    print('Thread 7 : pdf file desencrypted Finished' , future_7.result , "\n-----------------------\n")

    print('Thread 8 : csv file encrypted Finished' , future_8.result , "\n-----------------------\n")
    print('Thread 9 : csv file desencrypted Finished' , future_9.result , "\n-----------------------\n")

    print('Thread 10 : docx file encrypted Finished' , future_10.result , "\n-----------------------\n")
    print('Thread 11 : docx file desencrypted Finished' , future_11.result , "\n-----------------------\n")

    print('Thread 12 : xlsx file encrypted Finished' , future_12.result , "\n-----------------------\n")
    print('Thread 13 : xlsx file desencrypted Finished' , future_13.result , "\n-----------------------\n")

    print('Thread 14 : pptx file encrypted Finished' , future_14.result , "\n-----------------------\n")
    print('Thread 15 : pptx file desencrypted Finished' , future_15.result , "\n-----------------------\n")

    print('Thread 16 : png file encrypted Finished' , future_16.result , "\n-----------------------\n")
    print('Thread 17 : png file desencrypted Finished' , future_17.result , "\n-----------------------\n")

    print('Thread 18 : jpg file encrypted Finished' , future_18.result , "\n-----------------------\n")
    print('Thread 19 : jpg file desencrypted Finished' , future_19.result , "\n-----------------------\n")

    print('Thread 20 : gif file encrypted Finished' , future_20.result , "\n-----------------------\n")
    print('Thread 21 : gif file desencrypted Finished' , future_21.result , "\n-----------------------\n")
    print(times)
    plot_time(times)

if __name__ == '__main__':
    main()